Index: twisted/conch/insults/helper.py
===================================================================
--- twisted/conch/insults/helper.py	(revision 19328)
+++ twisted/conch/insults/helper.py	(working copy)
@@ -199,6 +199,17 @@
             except KeyError:
                 pass
 
+    def setPrivateModes(self, modes):
+        for m in modes:
+            self.privateModes[m] = True
+
+    def resetPrivateModes(self, modes):
+        for m in modes:
+            try:
+                del self.privateModes[m]
+            except KeyError:
+                pass
+
     def applicationKeypadMode(self):
         self.keypadMode = 'app'
 
@@ -306,6 +317,8 @@
         self.home = insults.Vector(0, 0)
         self.x = self.y = 0
         self.modes = {}
+        self.privateModes = {}
+        self.setPrivateModes([insults.privateModes.AUTO_WRAP, insults.privateModes.CURSOR_MODE])
         self.numericKeypad = 'app'
         self.activeCharset = insults.G0
         self.graphicRendition = {
Index: twisted/conch/insults/window.py
===================================================================
--- twisted/conch/insults/window.py	(revision 19328)
+++ twisted/conch/insults/window.py	(working copy)
@@ -43,6 +43,9 @@
         return self.terminal.write(bytes)
 
 class Widget(object):
+    """
+    A visual element.
+    """
     focused = False
     parent = None
     dirty = False
@@ -195,6 +198,8 @@
 class TopWindow(ContainerWidget):
     focused = True
 
+    from twisted.internet import reactor
+
     def __init__(self, painter):
         ContainerWidget.__init__(self)
         self.painter = painter
@@ -202,8 +207,7 @@
     _paintCall = None
     def repaint(self):
         if self._paintCall is None:
-            from twisted.internet import reactor
-            self._paintCall = reactor.callLater(0, self._paint)
+            self._paintCall = self.reactor.callLater(0, self._paint)
         ContainerWidget.repaint(self)
 
     def _paint(self):
